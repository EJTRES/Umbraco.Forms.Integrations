// This file is auto-generated by @hey-api/openapi-ts

export type AllowedUploadType = {
    type: string;
    name: string;
    checked: string;
};

export type AuthorizationRequest = {
    code: string;
};

export type AuthorizationResult = {
    readonly success: boolean;
    readonly errorMessage: string;
};

export enum EventMessageTypeModel {
    DEFAULT = 'Default',
    INFO = 'Info',
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning'
}

export type Field = {
    caption: string;
    tooltip?: string | null;
    /**
     * @deprecated
     */
    placeholder?: string | null;
    cssClass?: string | null;
    alias: string;
    id: string;
    fieldTypeId: string;
    prevalueSourceId: string;
    dataSourceFieldKey?: string | null;
    containsSensitiveData: boolean;
    mandatory: boolean;
    regex?: string | null;
    requiredErrorMessage?: string | null;
    invalidErrorMessage?: string | null;
    condition?: FieldCondition | null;
    settings: {
        [key: string]: (string);
    };
    preValues: Array<(FieldPrevalue)>;
    allowedUploadTypes?: Array<(AllowedUploadType)> | null;
    allowMultipleFileUploads: boolean;
};

export type FieldCondition = {
    id: string;
    enabled: boolean;
    actionType: FieldConditionActionType;
    logicType: FieldConditionLogicType;
    rules: Array<(FieldConditionRule)>;
};

export enum FieldConditionActionType {
    SHOW = 'Show',
    HIDE = 'Hide'
}

export enum FieldConditionLogicType {
    ALL = 'All',
    ANY = 'Any'
}

export type FieldConditionRule = {
    id: string;
    field: string;
    operator: FieldConditionRuleOperator;
    value: string;
};

export enum FieldConditionRuleOperator {
    IS = 'Is',
    IS_NOT = 'IsNot',
    GREATER_THEN = 'GreaterThen',
    LESS_THEN = 'LessThen',
    CONTAINS = 'Contains',
    CONTAINS_IGNORE_CASE = 'ContainsIgnoreCase',
    STARTS_WITH = 'StartsWith',
    STARTS_WITH_IGNORE_CASE = 'StartsWithIgnoreCase',
    ENDS_WITH = 'EndsWith',
    ENDS_WITH_IGNORE_CASE = 'EndsWithIgnoreCase',
    NOT_CONTAINS = 'NotContains',
    NOT_CONTAINS_IGNORE_CASE = 'NotContainsIgnoreCase',
    NOT_STARTS_WITH = 'NotStartsWith',
    NOT_STARTS_WITH_IGNORE_CASE = 'NotStartsWithIgnoreCase',
    NOT_ENDS_WITH = 'NotEndsWith',
    NOT_ENDS_WITH_IGNORE_CASE = 'NotEndsWithIgnoreCase'
}

export type FieldPrevalue = {
    value: string;
    caption?: string | null;
};

export type NotificationHeaderModel = {
    message: string;
    category: string;
    type: EventMessageTypeModel;
};

export type Property = {
    name: string;
    label: string;
    description: string;
};

export type IsAuthorizationConfiguredResponse = string;

export type GetAuthenticationUrlResponse = string;

export type AuthorizeData = {
    requestBody?: AuthorizationRequest;
};

export type AuthorizeResponse = AuthorizationResult;

export type DeauthorizeResponse = AuthorizationResult;

export type GetAllResponse = Array<(Property)>;

export type GetFormFieldsData = {
    formId?: string;
};

export type GetFormFieldsResponse = Array<(Field)>;

export type $OpenApiTs = {
    '/umbraco/hubspot/management/api/v1/contacts/auth/configured': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/hubspot/management/api/v1/contacts/auth/url': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/umbraco/hubspot/management/api/v1/contacts/authorize': {
        post: {
            req: AuthorizeData;
            res: {
                /**
                 * OK
                 */
                200: AuthorizationResult;
            };
        };
    };
    '/umbraco/hubspot/management/api/v1/contacts/deauthorize': {
        post: {
            res: {
                /**
                 * OK
                 */
                200: AuthorizationResult;
            };
        };
    };
    '/umbraco/hubspot/management/api/v1/contacts/properties': {
        get: {
            res: {
                /**
                 * OK
                 */
                200: Array<(Property)>;
            };
        };
    };
    '/umbraco/hubspot/management/api/v1/forms/fields': {
        get: {
            req: GetFormFieldsData;
            res: {
                /**
                 * OK
                 */
                200: Array<(Field)>;
            };
        };
    };
};